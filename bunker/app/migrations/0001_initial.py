# Generated by Django 3.2 on 2021-04-21 12:49

import app.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_online', models.BooleanField(default=False)),
                ('avatar', models.FileField(blank=True, null=True, upload_to=app.models.content_file_name_user, verbose_name='Аватар')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', app.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(blank=True, max_length=50, null=True, verbose_name='Пароль')),
                ('creator_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserChar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biodate', models.CharField(blank=True, max_length=5, null=True, verbose_name='Биологические данные')),
                ('job', models.CharField(blank=True, max_length=5, null=True, verbose_name='Профессия')),
                ('health', models.CharField(blank=True, max_length=5, null=True, verbose_name='Здоровье')),
                ('phobia', models.CharField(blank=True, max_length=5, null=True, verbose_name='Фобия')),
                ('hobby', models.CharField(blank=True, max_length=5, null=True, verbose_name='Хобби')),
                ('addinfo', models.CharField(blank=True, max_length=5, null=True, verbose_name='Допольнительная информация')),
                ('character', models.CharField(blank=True, max_length=5, null=True, verbose_name='Характер')),
                ('baggage', models.CharField(blank=True, max_length=5, null=True, verbose_name='Багаж')),
                ('spell_1', models.CharField(blank=True, max_length=5, null=True, verbose_name='Карта способности 1')),
                ('spell_2', models.CharField(blank=True, max_length=5, null=True, verbose_name='Карта способности 2')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GameRules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=5, null=True, verbose_name='Тип Катастрофы')),
                ('area', models.CharField(blank=True, max_length=5, null=True, verbose_name='Площадь')),
                ('days', models.CharField(blank=True, max_length=5, null=True, verbose_name='Количество дней')),
                ('items', models.CharField(blank=True, max_length=5, null=True, verbose_name='Предметы находящие в бункере')),
                ('population', models.CharField(blank=True, max_length=5, null=True, verbose_name='Количество(%) население оставщихся людей в мире')),
                ('desc', models.CharField(blank=True, max_length=5, null=True, verbose_name='Описание')),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='game', to='app.game')),
            ],
        ),
    ]
